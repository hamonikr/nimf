name: Test Multi-Platform Release with Docker Build

on:
  workflow_dispatch:  # 수동 실행 가능
  push:
    branches:
      - dev  # dev 브랜치에서 테스트

jobs:
  # 통합 빌드 job - 모든 플랫폼을 한 번에 빌드
  build-packages:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - dockerfile: debian.bookworm.Dockerfile
            platform: debian.bookworm
          - dockerfile: debian.trixie.Dockerfile
            platform: debian.trixie
          - dockerfile: ubuntu.2404.Dockerfile
            platform: ubuntu.2404
          - dockerfile: fedora.latest.Dockerfile
            platform: fedora.latest
          - dockerfile: opensuse.Dockerfile
            platform: opensuse
          - dockerfile: arch.Dockerfile
            platform: arch

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Build packages with docker build script
        run: |
          # 개선된 빌드 스크립트 사용
          chmod +x scripts/build-docker.sh
          
          # Dockerfile 이름에서 .Dockerfile 확장자 제거
          DOCKERFILE_NAME="${{ matrix.dockerfile }}"
          PLATFORM_NAME="${DOCKERFILE_NAME%.Dockerfile}"
          
          echo "Building packages for platform: $PLATFORM_NAME"
          ./scripts/build-docker.sh "$PLATFORM_NAME"
          
          # 생성된 패키지 확인
          echo "=== Generated packages for $PLATFORM_NAME ==="
          find dist/ -name "*" -type f | sort
          ls -la dist/$PLATFORM_NAME/ || echo "No packages found for $PLATFORM_NAME"

      - name: Upload platform artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.platform }}
          path: dist/${{ matrix.platform }}/*
          retention-days: 1

  # 릴리즈 생성 (테스트용 - 실제 릴리즈는 생성하지 않음)
  test-release-preparation:
    needs: build-packages
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-packages/
          merge-multiple: false

      - name: Organize packages for release
        run: |
          mkdir -p final-packages
          
          # 각 플랫폼별 패키지를 final-packages에 정리
          for platform_dir in release-packages/packages-*; do
            if [ -d "$platform_dir" ]; then
              platform_name=$(basename "$platform_dir" | sed 's/packages-//')
              echo "Processing platform: $platform_name"
              
              # 플랫폼별 패키지를 final-packages로 복사하면서 플랫폼 이름 추가
              find "$platform_dir" -type f \( -name "*.deb" -o -name "*.rpm" -o -name "*.pkg.tar.*" \) | while read file; do
                filename=$(basename "$file")
                # 파일명에 플랫폼 정보가 없으면 추가
                if [[ ! "$filename" =~ (fc42|opensuse|ubuntu|debian|arch) ]]; then
                  ext="${filename##*.}"
                  name="${filename%.*}"
                  new_filename="${name}-${platform_name}.${ext}"
                else
                  new_filename="$filename"
                fi
                cp "$file" "final-packages/$new_filename"
                echo "Copied: $filename -> $new_filename"
              done
            fi
          done
          
          # 결과 확인
          echo "=== Final packages for release ==="
          ls -la final-packages/ || echo "No packages found"
          echo "Total packages: $(find final-packages/ -type f | wc -l)"

      - name: Generate release notes (test)
        id: release-notes
        run: |
          # 동적으로 릴리즈 노트 생성 (패키지 설치 방법)
          cat > release-body.md << 'EOF'
          
          ## 🚀 설치 방법
          
          ### Ubuntu/Debian
          ```bash
          # 릴리즈 페이지에서 패키지 확인 후 다운로드
          # 예시: wget https://github.com/hamonikr/nimf/releases/download/VERSION/nimf_1.3.10_amd64.deb
          
          # 패키지 다운로드
          wget https://github.com/hamonikr/nimf/releases/download/VERSION/nimf_1.3.10_amd64.deb
          wget https://github.com/hamonikr/nimf/releases/download/VERSION/nimf-i18n_1.3.10_amd64.deb
          
          # nimf 패키지 설치
          sudo dpkg -i nimf_1.3.10_amd64.deb nimf-i18n_1.3.10_amd64.deb
          sudo apt-get install -f  # 의존성 해결
          ```
          
          ### Fedora
          ```bash
          # 릴리즈 페이지에서 정확한 파일명 확인 후 다운로드
          # 예시: wget https://github.com/hamonikr/nimf/releases/download/VERSION/nimf-1.3.10-1.fc42.x86_64.rpm
          curl -LO https://github.com/hamonikr/nimf/releases/download/VERSION/nimf-1.3.10-1.fc42.x86_64.rpm
          sudo dnf install ./nimf-1.3.10-1.fc42.x86_64.rpm
          ```
          
          ### OpenSUSE
          ```bash
          # 릴리즈 페이지에서 정확한 파일명 확인 후 다운로드
          # 예시: wget https://github.com/hamonikr/nimf/releases/download/VERSION/nimf-1.3.10-1.opensuse.x86_64.rpm
          curl -LO https://github.com/hamonikr/nimf/releases/download/VERSION/nimf-1.3.10-1.opensuse.x86_64.rpm
          sudo zypper install ./nimf-1.3.10-1.opensuse.x86_64.rpm
          ```
          
          ### Arch Linux
          ```bash
          # 릴리즈 페이지에서 정확한 파일명 확인 후 다운로드
          # 예시: wget https://github.com/hamonikr/nimf/releases/download/VERSION/nimf-1.3.10-1-x86_64.pkg.tar.zst
          curl -LO https://github.com/hamonikr/nimf/releases/download/VERSION/nimf-1.3.10-1-x86_64.pkg.tar.zst
          sudo pacman -U nimf-1.3.10-1-x86_64.pkg.tar.zst
          ```
          EOF
          
          echo "Generated release notes:"
          cat release-body.md

      - name: Upload test release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-release-packages
          path: final-packages/*
          retention-days: 7

      - name: Test Summary
        run: |
          echo "🧪 Test build completed successfully!"
          echo "📦 Packages that would be included in release:"
          find final-packages/ -type f | while read file; do
            filename=$(basename "$file")
            size=$(du -h "$file" | cut -f1)
            echo "  - $filename ($size)"
          done
          echo "✅ GitHub Actions workflow validation passed!"